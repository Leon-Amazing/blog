(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{568:function(t,s,l){"use strict";l.r(s);var v=l(6),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,l=t._self._c||s;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h3",{attrs:{id:"一-js代码执行"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#一-js代码执行"}},[t._v("#")]),t._v(" 一.js代码执行")]),t._v(" "),l("ol",[l("li",[t._v("从服务器拿到js代码(都是字符串)")]),t._v(" "),l("li",[t._v("进行词法分析(按照ECMA262)，得到AST语法树")]),t._v(" "),l("li",[t._v("浏览器底层(比如C++)，按照生成的语法树一步步的去执行")])]),t._v(" "),l("h3",{attrs:{id:"二-函数执行"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#二-函数执行"}},[t._v("#")]),t._v(" 二.函数执行")]),t._v(" "),l("ol",[l("li",[t._v("产生一个全新的私有上下文EC(X)和AO(X)")]),t._v(" "),l("li",[t._v("初始化作用域链(自己的上下文，上级上下文) => <EC(X),EC(G)>")]),t._v(" "),l("li",[t._v("初始化this (window或其他)")]),t._v(" "),l("li",[t._v("初始化arguments(类数组对象) => {0:1,length:1}")]),t._v(" "),l("li",[t._v("形参赋值(存到AO(X)中) => x=1")]),t._v(" "),l("li",[t._v("变量提升(--)")]),t._v(" "),l("li",[t._v("代码执行(函数内的代码执行)")])])])}),[],!1,null,null,null);s.default=_.exports}}]);